// ===================================================================================================
// üåê CONFIGURACI√ìN DE LA API Y CONSTANTES GLOBALES
// ===================================================================================================

// URL base del servidor backend que implementa la autenticaci√≥n JWT
// En producci√≥n, esta URL deber√≠a configurarse atrav√©s de variables de entorno
// para permitir diferentes endpoints seg√∫n el ambiente (desarrollo, staging, producci√≥n)
// Vite expone variables de entorno que empiecen con VITE_ al frontend
const API_BASE = import.meta.env.VITE_API_BASE || 'http://localhost:3000/api';

// ===================================================================================================
// üè∑Ô∏è DEFINICIONES DE TIPOS TYPESCRIPT PARA JWT Y AUTENTICACI√ìN
// ===================================================================================================

// Interfaz que define la estructura de un usuario en el sistema
// Esta interfaz representa los datos del usuario que se almacenan en el payload del JWT
// y que se utilizan a lo largo de la aplicaci√≥n para mostrar informaci√≥n del usuario autenticado
interface User {
  id: string;       // Identificador √∫nico del usuario en la base de datos
  username: string; // Nombre de usuario √∫nico utilizado para el login
  role: string;     // Rol del usuario (user, admin, superadmin) que determina permisos
}

// Interfaz que define la estructura completa de la respuesta del endpoint de login
// Esta respuesta contiene tanto los tokens JWT como informaci√≥n adicional del usuario
// El servidor devuelve esta estructura cuando las credenciales son v√°lidas
interface LoginResponse {
  success: boolean;        // Indica si el login fue exitoso
  message: string;         // Mensaje descriptivo del resultado del login
  user?: User;            // Informaci√≥n del usuario (solo presente si success=true)
  accessToken?: string;    // Token JWT de acceso con tiempo de vida corto (15 min)
  refreshToken?: string;   // Token JWT de refresco con tiempo de vida largo (7 d√≠as)
  tokenType?: string;      // Tipo de token, t√≠picamente "Bearer" para JWT
  expiresIn?: number;      // Tiempo de expiraci√≥n del access token en segundos
  note?: string;           // Nota adicional con informaci√≥n sobre el uso de tokens
}

// Interfaz para la informaci√≥n temporal contenida en los tokens JWT
// Los tokens JWT incluyen timestamps est√°ndar (iat, exp) que permiten validar
// cu√°ndo fue emitido el token y cu√°ndo expira
interface TokenInfo {
  iat?: number;           // "Issued At" - timestamp de cuando se emiti√≥ el token
  exp?: number;           // "Expires" - timestamp de cuando expira el token
  [key: string]: any;     // Permite otras propiedades adicionales en el token
}

// ===================================================================================================
// üíæ CLASE TOKENMANGER - GESTI√ìN CENTRAL DE TOKENS JWT
// ===================================================================================================

// Clase responsable de la gesti√≥n completa del ciclo de vida de los tokens JWT
// Implementa una estrategia de almacenamiento dual: memoria + localStorage
// Esta clase centraliza todas las operaciones relacionadas con tokens para mantener
// consistencia y facilitar el mantenimiento del c√≥digo
class TokenManager {
  // Almacenamiento en memoria para acceso r√°pido durante la sesi√≥n activa
  // Los tokens en memoria se pierden al recargar la p√°gina, pero son m√°s seguros
  // contra ataques XSS ya que no est√°n accesibles atrav√©s del objeto window
  private accessToken: string | null = null;
  private refreshToken: string | null = null;

  // ===============================================================================================
  // üíæ M√âTODO PARA GUARDAR TOKENS EN MEMORIA Y LOCALSTORAGE
  // ===============================================================================================
  
  // Almacena los tokens tanto en memoria como en localStorage para persistencia
  // Estrategia dual permite: velocidad (memoria) + persistencia (localStorage)
  // CONSIDERACIONES DE SEGURIDAD:
  // - localStorage es vulnerable a XSS pero persiste entre sesiones
  // - Memoria es m√°s segura pero se pierde al recargar
  // - En producci√≥n considerar usar cookies HttpOnly para mayor seguridad
  setTokens(accessToken: string, refreshToken: string) {
    // Almacenar en memoria para acceso inmediato y eficiente
    this.accessToken = accessToken;
    this.refreshToken = refreshToken;
    
    // Persistir en localStorage para mantener sesi√≥n atrav√©s recargas de p√°gina
    // Esto permite que el usuario permanezca logueado al cerrar/abrir la pesta√±a
    localStorage.setItem('accessToken', accessToken);
    localStorage.setItem('refreshToken', refreshToken);
    
    // Log informativo para debugging y seguimiento del flujo de autenticaci√≥n
    console.log('üíæ Tokens guardados en memoria y localStorage');
    console.log('üîê Access token length:', accessToken.length);
    console.log('üîÑ Refresh token length:', refreshToken.length);
  }

  // ===============================================================================================
  // üé´ M√âTODO PARA OBTENER EL ACCESS TOKEN
  // ===============================================================================================
  
  // Obtiene el access token con estrategia de fallback: memoria ‚Üí localStorage
  // Primero intenta obtener de memoria (m√°s r√°pido), si no est√° disponible
  // lo recupera de localStorage (persistencia atrav√©s recargas)
  getAccessToken(): string | null {
    // Si no est√° en memoria, intentar recuperar de localStorage
    // Esto ocurre t√≠picamente despu√©s de recargar la p√°gina
    if (!this.accessToken) {
      this.accessToken = localStorage.getItem('accessToken');
      if (this.accessToken) {
        console.log('üîÑ Access token recuperado de localStorage');
      }
    }
    return this.accessToken;
  }

  // ===============================================================================================
  // üîÑ M√âTODO PARA OBTENER EL REFRESH TOKEN
  // ===============================================================================================
  
  // Similar al access token, pero para el refresh token de larga duraci√≥n
  // El refresh token se usa para obtener nuevos access tokens sin requerir login
  getRefreshToken(): string | null {
    // Aplicar la misma estrategia de fallback: memoria ‚Üí localStorage
    if (!this.refreshToken) {
      this.refreshToken = localStorage.getItem('refreshToken');
      if (this.refreshToken) {
        console.log('üîÑ Refresh token recuperado de localStorage');
      }
    }
    return this.refreshToken;
  }

  // ===============================================================================================
  // üóëÔ∏è M√âTODO PARA LIMPIAR TOKENS (LOGOUT)
  // ===============================================================================================
  
  // Limpia completamente todos los tokens del cliente
  // Esto efectivamente "desloguea" al usuario localmente
  // IMPORTANTE: Tambi√©n se debe notificar al servidor para invalidar el refresh token
  clearTokens() {
    // Limpiar memoria
    this.accessToken = null;
    this.refreshToken = null;
    
    // Limpiar localStorage para eliminar persistencia
    localStorage.removeItem('accessToken');
    localStorage.removeItem('refreshToken');
    
    // Log para confirmar limpieza exitosa
    console.log('üóëÔ∏è Tokens eliminados de memoria y localStorage');
    console.log('üîì Usuario deslogueado localmente');
  }

  // ===============================================================================================
  // ‚úÖ M√âTODO PARA VERIFICAR PRESENCIA DE TOKENS
  // ===============================================================================================
  
  // Verifica si el usuario tiene ambos tokens necesarios para la autenticaci√≥n
  // Retorna true solo si tanto access como refresh token est√°n disponibles
  // Esto no valida que los tokens sean v√°lidos, solo que existen
  hasTokens(): boolean {
    const hasAccess = !!this.getAccessToken();
    const hasRefresh = !!this.getRefreshToken();
    
    console.log('üîç Verificaci√≥n de tokens:', { 
      hasAccess, 
      hasRefresh, 
      bothPresent: hasAccess && hasRefresh 
    });
    
    return hasAccess && hasRefresh;
  }
}

// ===================================================================================================
// üåç INSTANCIA GLOBAL DEL GESTOR DE TOKENS
// ===================================================================================================

// Crear una instancia global √∫nica (singleton pattern) del TokenManager
// Esto asegura que toda la aplicaci√≥n use la misma instancia para gestionar tokens
// evitando inconsistencias y problemas de sincronizaci√≥n
const tokenManager = new TokenManager();

// ===================================================================================================
// üé® REFERENCIAS A ELEMENTOS DEL DOM
// ===================================================================================================

// Obtener referencias a todos los elementos del DOM que la aplicaci√≥n necesita manipular
// Usar el operador ! (non-null assertion) porque sabemos que estos elementos existen en el HTML
// En una aplicaci√≥n real, ser√≠a recomendable agregar verificaciones de existencia

// Secciones principales de la interfaz
const loginSection = document.getElementById('login-section')!;  // Formulario de login
const userSection = document.getElementById('user-section')!;    // Panel de usuario autenticado

// Elementos del formulario de login
const loginForm = document.getElementById('login-form') as HTMLFormElement;
const usernameInput = document.getElementById('username') as HTMLInputElement;
const passwordInput = document.getElementById('password') as HTMLInputElement;

// Elementos de informaci√≥n y estado
const authInfo = document.getElementById('auth-info')!;           // Informaci√≥n de autenticaci√≥n
const authStatus = document.getElementById('auth-status')!;       // Estado visual de auth
const userInfo = document.getElementById('user-info')!;          // Informaci√≥n del usuario
const responseArea = document.getElementById('response-area')!;   // √Årea de respuestas API
const tokenStorage = document.getElementById('token-storage')!;   // Informaci√≥n de tokens

// Elementos para herramientas JWT
const jwtInput = document.getElementById('jwt-input') as HTMLTextAreaElement;  // Input para JWT
const jwtOutput = document.getElementById('jwt-output')!;                      // Output decodificado

// Botones de acci√≥n
const getProfileBtn = document.getElementById('get-profile')!;      // Obtener perfil de usuario
const getSecretBtn = document.getElementById('get-secret')!;        // Obtener datos secretos
const refreshTokenBtn = document.getElementById('refresh-token')!;  // Renovar access token
const logoutBtn = document.getElementById('logout')!;              // Cerrar sesi√≥n
const refreshStorageBtn = document.getElementById('refresh-storage')!; // Actualizar vista storage
const decodeJwtBtn = document.getElementById('decode-jwt')!;        // Decodificar JWT manual

// ===================================================================================================
// üîê FUNCI√ìN PARA REALIZAR PETICIONES HTTP CON AUTENTICACI√ìN JWT
// ===================================================================================================

// Funci√≥n wrapper que automatiza la inclusi√≥n del token JWT en las peticiones HTTP
// Esta funci√≥n extiende fetch() para agregar autom√°ticamente el header Authorization
// Esto centraliza la l√≥gica de autenticaci√≥n y evita repetir c√≥digo en cada petici√≥n
async function fetchWithJWT(url: string, options: RequestInit = {}) {
  console.log('üåê Iniciando petici√≥n autenticada a:', url);
  
  // Obtener el access token actual del TokenManager
  const accessToken = tokenManager.getAccessToken();
  
  // Crear headers y asegurar que Content-Type est√© configurado
  // Headers se gestionan atrav√©s de la clase Headers para mayor compatibilidad
  const headers = new Headers(options.headers);
  headers.set('Content-Type', 'application/json');
  
  // Si tenemos un access token, agregarlo al header Authorization
  // El formato Bearer es el est√°ndar para tokens JWT en HTTP
  if (accessToken) {
    headers.set('Authorization', `Bearer ${accessToken}`);
    console.log('üé´ Enviando request con Authorization header');
    console.log('üîç Token preview:', accessToken.substring(0, 20) + '...');
  } else {
    console.log('‚ö†Ô∏è No hay access token disponible - petici√≥n sin autenticaci√≥n');
  }
  
  // Realizar la petici√≥n HTTP con los headers modificados
  // Spread operator (...) preserva todas las opciones originales
  return fetch(url, {
    ...options,
    headers,
  });
}

// ===================================================================================================
// üîÑ FUNCI√ìN PARA RENOVAR EL ACCESS TOKEN USANDO EL REFRESH TOKEN
// ===================================================================================================

// Implementa el flujo de renovaci√≥n autom√°tica de tokens JWT
// Cuando un access token expira, esta funci√≥n intenta obtener uno nuevo
// usando el refresh token de larga duraci√≥n, evitando que el usuario deba hacer login
async function refreshAccessToken(): Promise<boolean> {
  console.log('üîÑ Iniciando proceso de renovaci√≥n de access token...');
  
  // Obtener el refresh token del almacenamiento
  const refreshToken = tokenManager.getRefreshToken();
  
  // Verificar que tenemos un refresh token disponible
  if (!refreshToken) {
    console.log('‚ùå No hay refresh token disponible para renovaci√≥n');
    console.log('üîê El usuario deber√° hacer login nuevamente');
    return false;
  }
  
  try {
    console.log('üì§ Enviando refresh token al servidor...');
    
    // Realizar petici√≥n al endpoint de refresh
    // NOTA: Esta petici√≥n NO usa fetchWithJWT porque no necesita access token
    const response = await fetch(`${API_BASE}/refresh`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ refreshToken }),
    });
    
    // Parsear la respuesta del servidor
    const data = await response.json();
    console.log('üì• Respuesta del servidor de refresh:', data);
    
    // Verificar si la renovaci√≥n fue exitosa
    if (response.ok && data.accessToken) {
      console.log('‚úÖ Access token renovado exitosamente');
      console.log('‚è∞ Nuevo token v√°lido por 15 minutos');
      
      // Guardar el nuevo access token (mantener el mismo refresh token)
      tokenManager.setTokens(data.accessToken, refreshToken);
      
      // Actualizar la interfaz para reflejar el nuevo estado
      updateTokenDisplay();
      return true;
    } else {
      // Renovaci√≥n fall√≥ - probablemente refresh token expirado o inv√°lido
      console.log('‚ùå Error renovando token:', data.error);
      console.log('üîê Refresh token posiblemente expirado o revocado');
      return false;
    }
  } catch (error) {
    // Error de red o del servidor
    console.error('‚ùå Error de comunicaci√≥n en refresh:', error);
    return false;
  }
}

// ===================================================================================================
// üîì FUNCI√ìN PARA DECODIFICAR TOKENS JWT (SIN VERIFICACI√ìN DE FIRMA)
// ===================================================================================================

// Decodifica un token JWT para inspeccionar su contenido
// IMPORTANTE: Esta funci√≥n NO verifica la firma del token, solo decodifica el contenido
// La verificaci√≥n de firma debe realizarse en el servidor por seguridad
function decodeJWT(token: string): any {
  console.log('üîç Iniciando decodificaci√≥n de JWT...');
  
  try {
    // Un JWT v√°lido siempre tiene exactamente 3 partes separadas por puntos
    // Formato: header.payload.signature
    const parts = token.split('.');
    if (parts.length !== 3) {
      throw new Error('JWT malformado - debe tener exactamente 3 partes (header.payload.signature)');
    }
    
    console.log('üìã JWT tiene estructura v√°lida (3 partes)');
    
    // Decodificar header y payload que est√°n codificados en base64url
    // base64url es similar a base64 pero usa - en lugar de + y _ en lugar de /
    // y no incluye padding (=) al final
    const header = JSON.parse(atob(parts[0].replace(/-/g, '+').replace(/_/g, '/')));
    const payload = JSON.parse(atob(parts[1].replace(/-/g, '+').replace(/_/g, '/')));
    
    console.log('‚úÖ JWT decodificado exitosamente');
    console.log('üè∑Ô∏è Header:', header);
    console.log('üì¶ Payload:', payload);
    
    // Retornar las tres partes del JWT
    return { 
      header,      // Informaci√≥n sobre el algoritmo y tipo de token
      payload,     // Datos del usuario y metadatos del token
      signature: parts[2]  // Firma digital (no decodificable sin la clave)
    };
  } catch (error) {
    console.error('‚ùå Error decodificando JWT:', error);
    throw new Error('Error decodificando JWT: ' + error);
  }
}

// ===================================================================================================
// üéØ FUNCI√ìN PARA ACTUALIZAR LA VISUALIZACI√ìN DE TOKENS EN LA INTERFAZ
// ===================================================================================================

// Actualiza la secci√≥n de informaci√≥n de tokens en tiempo real
// Muestra detalles del access token, estado del refresh token y informaci√≥n de almacenamiento
function updateTokenDisplay() {
  console.log('üîÑ Actualizando visualizaci√≥n de tokens...');
  
  const accessToken = tokenManager.getAccessToken();
  const refreshToken = tokenManager.getRefreshToken();
  
  // Solo mostrar informaci√≥n si tenemos un access token
  if (accessToken) {
    try {
      // Decodificar el access token para mostrar su contenido
      const decoded = decodeJWT(accessToken);
      
      // Calcular tiempo restante hasta expiraci√≥n
      const now = Math.floor(Date.now() / 1000);  // Timestamp actual en segundos
      const timeLeft = decoded.payload.exp - now;  // Segundos hasta expiraci√≥n
      
      // Generar HTML informativo con todos los detalles relevantes
      tokenStorage.innerHTML = `
<strong>üé´ ACCESS TOKEN:</strong>
Usuario: ${decoded.payload.username}
Rol: ${decoded.payload.role}
Emitido: ${new Date(decoded.payload.iat * 1000).toLocaleString()}
Expira: ${new Date(decoded.payload.exp * 1000).toLocaleString()}
Tiempo restante: ${timeLeft > 0 ? timeLeft + ' segundos' : '‚ö†Ô∏è EXPIRADO'}

<strong>üîÑ REFRESH TOKEN:</strong>
Estado: ${refreshToken ? '‚úÖ Presente y disponible' : '‚ùå No disponible'}
${refreshToken ? 'V√°lido por: 7 d√≠as desde login' : 'Requiere nuevo login'}

<strong>üì± ALMACENAMIENTO:</strong>
localStorage: ${localStorage.getItem('accessToken') ? '‚úÖ Persistido' : '‚ùå No encontrado'}
Memoria: ${tokenManager.getAccessToken() ? '‚úÖ En memoria' : '‚ùå No disponible'}
Sincronizaci√≥n: ${localStorage.getItem('accessToken') === tokenManager.getAccessToken() ? '‚úÖ Sincronizado' : '‚ö†Ô∏è Desincronizado'}
      `;
      
      // Aplicar estilo visual para tokens v√°lidos
      tokenStorage.className = 'info-box success';
      
      console.log('‚úÖ Display de tokens actualizado exitosamente');
    } catch (error) {
      // Error decodificando token - probablemente corrupto
      console.error('‚ùå Error decodificando token para display:', error);
      tokenStorage.innerHTML = 'Error decodificando token: ' + error;
      tokenStorage.className = 'info-box error';
    }
  } else {
    // No hay tokens disponibles
    console.log('üì≠ No hay tokens para mostrar');
    tokenStorage.innerHTML = `
<strong>üì≠ NO HAY TOKENS ALMACENADOS</strong>

Para acceder a recursos protegidos:
1. Inicia sesi√≥n con tus credenciales
2. Los tokens se guardar√°n autom√°ticamente
3. El access token se renovar√° autom√°ticamente

<strong>üîê ESTADO ACTUAL:</strong>
- Sin autenticaci√≥n activa
- Acceso limitado a recursos p√∫blicos √∫nicamente
    `;
    tokenStorage.className = 'info-box';
  }
}

// ===================================================================================================
// üìä FUNCI√ìN PARA VERIFICAR EL ESTADO DE AUTENTICACI√ìN ACTUAL
// ===================================================================================================

// Verifica si el usuario est√° autenticado y actualiza la interfaz accordingly
// Esta funci√≥n coordina toda la l√≥gica de estado de autenticaci√≥n de la aplicaci√≥n
async function checkAuthStatus() {
  console.log('üîç Verificando estado de autenticaci√≥n...');
  
  // Primer check: ¬øtenemos tokens almacenados?
  if (!tokenManager.hasTokens()) {
    console.log('‚ùå No hay tokens - mostrando pantalla de login');
    showLoginSection();
    authInfo.innerHTML = '‚ùå No hay tokens almacenados - Inicia sesi√≥n para continuar';
    authStatus.className = 'status-box';
    return;
  }
  
  console.log('üé´ Tokens encontrados - verificando validez con servidor...');
  
  try {
    // Intentar acceder a un endpoint protegido para validar el token
    // Usamos /profile porque requiere autenticaci√≥n pero no permisos especiales
    const response = await fetchWithJWT(`${API_BASE}/profile`);
    
    if (response.ok) {
      // Token v√°lido - usuario autenticado exitosamente
      const data = await response.json();
      console.log('‚úÖ Usuario autenticado correctamente:', data.user);
      
      // Mostrar interfaz de usuario autenticado
      showUserSection(data.user);
      
      // Mostrar informaci√≥n detallada de autenticaci√≥n
      authInfo.innerHTML = `
        ‚úÖ <strong>Autenticado con JWT</strong><br>
        üë§ Usuario: ${data.user.username}<br>
        üé≠ Rol: ${data.user.role}<br>
        ‚è∞ Token expira: ${data.tokenInfo.expiresAt}<br>
        üîÑ Renovaci√≥n: Autom√°tica antes de expirar
      `;
      authStatus.className = 'status-box authenticated';
      
    } else if (response.status === 401) {
      // Token expirado - intentar renovaci√≥n autom√°tica
      console.log('‚è∞ Access token expirado - iniciando renovaci√≥n autom√°tica...');
      const renewed = await refreshAccessToken();
      
      if (renewed) {
        console.log('üîÑ Token renovado - reintentando verificaci√≥n...');
        // Recursivamente verificar estado con el nuevo token
        await checkAuthStatus();
      } else {
        console.log('‚ùå No se pudo renovar token - requiere login manual');
        // Renovaci√≥n fall√≥ - limpiar tokens y mostrar login
        showLoginSection();
        authInfo.innerHTML = '‚è∞ Tokens expirados - Es necesario iniciar sesi√≥n nuevamente';
        authStatus.className = 'status-box';
        tokenManager.clearTokens();
      }
    } else {
      // Otro tipo de error del servidor
      throw new Error(`Error del servidor: ${response.status} ${response.statusText}`);
    }
  } catch (error) {
    // Error de red o servidor no disponible
    console.error('‚ùå Error verificando estado de autenticaci√≥n:', error);
    showLoginSection();
    authInfo.innerHTML = '‚ùå Error de comunicaci√≥n con el servidor - Verifica conexi√≥n';
    authStatus.className = 'status-box error';
  }
  
  // Actualizar display de tokens independientemente del resultado
  updateTokenDisplay();
}

// ===================================================================================================
// üö™ FUNCI√ìN PARA MOSTRAR LA SECCI√ìN DE LOGIN
// ===================================================================================================

// Configura la interfaz para mostrar el formulario de login
// Oculta las secciones de usuario autenticado y limpia informaci√≥n previa
function showLoginSection() {
  console.log('üö™ Mostrando secci√≥n de login');
  
  // Mostrar formulario de login y ocultar panel de usuario
  loginSection.style.display = 'block';
  userSection.style.display = 'none';
  
  // Limpiar √°rea de respuestas previas
  responseArea.innerHTML = '';
  
  console.log('üìã Formulario de login listo para credenciales');
}

// ===================================================================================================
// üë§ FUNCI√ìN PARA MOSTRAR LA SECCI√ìN DE USUARIO AUTENTICADO
// ===================================================================================================

// Configura la interfaz para un usuario autenticado exitosamente
// Muestra informaci√≥n del usuario y oculta el formulario de login
function showUserSection(user: User) {
  console.log('üë§ Mostrando secci√≥n de usuario autenticado:', user.username);
  
  // Ocultar login y mostrar panel de usuario
  loginSection.style.display = 'none';
  userSection.style.display = 'block';
  
  // Mostrar informaci√≥n personalizada del usuario
  userInfo.innerHTML = `
    <div class="success">
      üëã ¬°Bienvenido, <strong>${user.username}</strong>!<br>
      üé≠ Rol: <strong>${user.role}</strong><br>
      üîê Autenticado con JWT - Sin estado en el servidor<br>
      üõ°Ô∏è Acceso seguro a recursos protegidos habilitado
    </div>
  `;
  
  console.log('‚úÖ Panel de usuario configurado exitosamente');
}

// ===================================================================================================
// üìù FUNCI√ìN PARA MOSTRAR RESPUESTAS DE LA API EN LA INTERFAZ
// ===================================================================================================

// Funci√≥n utilitaria para mostrar respuestas de la API de manera consistente
// Formatea y estiliza las respuestas para mejor legibilidad
function displayResponse(data: any, isError: boolean = false) {
  console.log('üìù Mostrando respuesta en interfaz:', { isError, dataType: typeof data });
  
  // Formatear JSON con indentaci√≥n para mejor legibilidad
  responseArea.innerHTML = JSON.stringify(data, null, 2);
  
  // Aplicar estilos seg√∫n tipo de respuesta (√©xito o error)
  responseArea.className = `response-box ${isError ? 'error' : 'success'}`;
  
  console.log('‚úÖ Respuesta mostrada en interfaz');
}

// ===================================================================================================
// üéÆ EVENT LISTENERS - MANEJO DE INTERACCIONES DEL USUARIO
// ===================================================================================================

// ===================================================================================================
// üîê EVENT LISTENER: FORMULARIO DE LOGIN
// ===================================================================================================

// Maneja el proceso completo de autenticaci√≥n cuando el usuario env√≠a el formulario
loginForm.addEventListener('submit', async (e) => {
  // Prevenir env√≠o tradicional del formulario (evitar recarga de p√°gina)
  e.preventDefault();
  
  console.log('üîê Procesando intento de login...');
  
  // Obtener y limpiar datos del formulario
  const username = usernameInput.value.trim();
  const password = passwordInput.value.trim();
  
  // Validaci√≥n b√°sica en el frontend
  if (!username || !password) {
    console.log('‚ùå Validaci√≥n fall√≥: campos requeridos vac√≠os');
    displayResponse({ 
      error: 'Usuario y contrase√±a son requeridos',
      hint: 'Por favor completa ambos campos antes de continuar'
    }, true);
    return;
  }
  
  console.log('üì§ Enviando credenciales al servidor...', { username });
  
  try {
    // Realizar petici√≥n de login al servidor
    // NOTA: La contrase√±a se env√≠a en texto plano porque este es un demo
    // En producci√≥n usar HTTPS obligatorio y considerar t√©cnicas adicionales
    const response = await fetch(`${API_BASE}/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ username, password })
    });
    
    // Parsear respuesta del servidor
    const data: LoginResponse = await response.json();
    console.log('üì• Respuesta de login recibida:', { success: data.success });
    
    // Verificar si el login fue exitoso
    if (data.success && data.accessToken && data.refreshToken) {
      console.log('‚úÖ Login JWT exitoso - tokens recibidos');
      
      // Almacenar tokens JWT para futuras peticiones
      tokenManager.setTokens(data.accessToken, data.refreshToken);
      
      // Limpiar formulario por seguridad y UX
      usernameInput.value = '';
      passwordInput.value = '';
      
      // Actualizar interfaz al estado autenticado
      await checkAuthStatus();
      
      // Mostrar confirmaci√≥n exitosa al usuario
      displayResponse({
        message: '‚úÖ Login exitoso - Acceso autorizado',
        user: data.user,
        tokenInfo: {
          type: data.tokenType,
          expiresIn: data.expiresIn + ' segundos',
          autoRefresh: 'Activado'
        },
        note: 'üé´ JWT tokens almacenados y configurados autom√°ticamente'
      });
    } else {
      // Login fall√≥ - mostrar error del servidor
      console.log('‚ùå Login fall√≥:', data.message);
      displayResponse(data, true);
    }
  } catch (error) {
    // Error de comunicaci√≥n con el servidor
    console.error('‚ùå Error durante login:', error);
    displayResponse({ 
      error: 'Error de comunicaci√≥n con el servidor',
      details: 'Verifica que el servidor backend est√© ejecut√°ndose',
      hint: 'Aseg√∫rate de que el servidor est√© disponible en ' + API_BASE
    }, true);
  }
});

// ===================================================================================================
// üë§ EVENT LISTENER: BOT√ìN OBTENER PERFIL
// ===================================================================================================

// Demuestra c√≥mo acceder a un endpoint protegido con JWT
getProfileBtn.addEventListener('click', async () => {
  console.log('üë§ Solicitando perfil de usuario...');
  
  try {
    // Realizar petici√≥n autenticada al endpoint de perfil
    const response = await fetchWithJWT(`${API_BASE}/profile`);
    const data = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ Perfil obtenido exitosamente');
      displayResponse({
        message: '‚úÖ Perfil obtenido exitosamente',
        ...data,
        note: 'üé´ Datos extra√≠dos directamente del JWT payload sin consulta a base de datos'
      });
    } else {
      console.log('‚ùå Error obteniendo perfil:', data);
      displayResponse(data, true);
      
      // Si es error 401, intentar renovar token autom√°ticamente
      if (response.status === 401) {
        console.log('üîÑ Token expirado - iniciando renovaci√≥n autom√°tica...');
        await checkAuthStatus();
      }
    }
  } catch (error) {
    console.error('‚ùå Error en petici√≥n de perfil:', error);
    displayResponse({ 
      error: 'Error conectando con el servidor',
      endpoint: '/api/profile'
    }, true);
  }
});

// ===================================================================================================
// üîí EVENT LISTENER: BOT√ìN OBTENER DATOS SECRETOS
// ===================================================================================================

// Demuestra autorizaci√≥n basada en roles trav√©s de JWT
getSecretBtn.addEventListener('click', async () => {
  console.log('üîí Solicitando datos secretos (basado en rol)...');
  
  try {
    // Petici√≥n a endpoint que requiere autenticaci√≥n y verifica roles
    const response = await fetchWithJWT(`${API_BASE}/secret-data`);
    const data = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ Datos secretos obtenidos - rol verificado');
      displayResponse({
        message: 'üîí Datos secretos obtenidos exitosamente',
        ...data,
        note: 'üé≠ Contenido personalizado basado en el rol JWT del usuario'
      });
    } else {
      console.log('‚ùå Error obteniendo datos secretos:', data);
      displayResponse(data, true);
      
      // Manejar expiraci√≥n de token
      if (response.status === 401) {
        await checkAuthStatus();
      }
    }
  } catch (error) {
    console.error('‚ùå Error obteniendo datos secretos:', error);
    displayResponse({ 
      error: 'Error conectando con el servidor',
      endpoint: '/api/secret-data'
    }, true);
  }
});

// ===================================================================================================
// üîÑ EVENT LISTENER: BOT√ìN RENOVAR TOKEN
// ===================================================================================================

// Permite renovaci√≥n manual del access token (normalmente es autom√°tica)
refreshTokenBtn.addEventListener('click', async () => {
  console.log('üîÑ Renovaci√≥n manual de token solicitada...');
  
  const success = await refreshAccessToken();
  
  if (success) {
    console.log('‚úÖ Renovaci√≥n manual exitosa');
    displayResponse({
      message: 'üîÑ Access token renovado exitosamente',
      note: 'üé´ Nuevo token activo y listo para usar',
      validity: '15 minutos adicionales',
      autoRefresh: 'Configurado autom√°ticamente'
    });
    
    // Actualizar estado de autenticaci√≥n con nuevo token
    await checkAuthStatus();
  } else {
    console.log('‚ùå Renovaci√≥n manual fall√≥');
    displayResponse({
      error: '‚ùå No se pudo renovar el token',
      possibleCauses: [
        'Refresh token expirado (>7 d√≠as)',
        'Refresh token revocado en servidor',
        'Error de comunicaci√≥n'
      ],
      hint: 'Intenta hacer login nuevamente'
    }, true);
    
    // Limpiar tokens inv√°lidos y forzar login
    tokenManager.clearTokens();
    await checkAuthStatus();
  }
});

// ===================================================================================================
// üö™ EVENT LISTENER: BOT√ìN LOGOUT
// ===================================================================================================

// Maneja el proceso completo de cierre de sesi√≥n
logoutBtn.addEventListener('click', async () => {
  console.log('üö™ Iniciando proceso de logout...');
  
  const refreshToken = tokenManager.getRefreshToken();
  
  try {
    // Notificar al servidor para invalidar el refresh token
    // Esto previene el uso del token even si alguien lo obtuviera
    if (refreshToken) {
      console.log('üì§ Notificando logout al servidor...');
      await fetch(`${API_BASE}/logout`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ refreshToken })
      });
      console.log('‚úÖ Servidor notificado - refresh token invalidado');
    }
    
    // Limpiar tokens del cliente
    tokenManager.clearTokens();
    
    // Actualizar interfaz al estado no autenticado
    await checkAuthStatus();
    
    console.log('üö™ Logout completado exitosamente');
    displayResponse({
      message: 'üö™ Logout exitoso',
      actions: [
        'üóëÔ∏è Tokens eliminados del cliente',
        '‚ùå Refresh token invalidado en servidor',
        'üîì Sesi√≥n cerrada completamente'
      ],
      note: 'El access token permanece t√©cnicamente v√°lido hasta su expiraci√≥n natural (15 min) pero ya no es renovable'
    });
  } catch (error) {
    console.error('‚ö†Ô∏è Error comunicando logout al servidor:', error);
    
    // A√∫n as√≠ limpiar tokens localmente para seguridad
    tokenManager.clearTokens();
    await checkAuthStatus();
    
    displayResponse({
      message: 'üö™ Logout local exitoso',
      warning: 'No se pudo notificar al servidor',
      note: 'Tokens eliminados localmente por seguridad'
    });
  }
});

// ===================================================================================================
// üîÑ EVENT LISTENER: BOT√ìN ACTUALIZAR STORAGE
// ===================================================================================================

// Permite actualizaci√≥n manual del display de tokens
refreshStorageBtn.addEventListener('click', () => {
  console.log('üîÑ Actualizando display de storage manualmente...');
  updateTokenDisplay();
  console.log('‚úÖ Display actualizado');
});

// ===================================================================================================
// üîç EVENT LISTENER: BOT√ìN DECODIFICAR JWT
// ===================================================================================================

// Herramienta educativa para decodificar y analizar tokens JWT
decodeJwtBtn.addEventListener('click', () => {
  console.log('üîç Iniciando decodificaci√≥n manual de JWT...');
  
  const token = jwtInput.value.trim();
  
  // Validar que se ingres√≥ un token
  if (!token) {
    console.log('‚ùå No se ingres√≥ token para decodificar');
    jwtOutput.innerHTML = `
<strong>‚ö†Ô∏è TOKEN REQUERIDO</strong>

Para usar esta herramienta:
1. Pega un token JWT en el campo de arriba
2. Presiona "Decodificar JWT"
3. Analiza la estructura y contenido

<strong>üí° FUENTES DE TOKENS:</strong>
- Copia tu token actual del storage
- Usa tokens de otros sistemas JWT
- Genera tokens de prueba online
    `;
    jwtOutput.className = 'info-box error';
    return;
  }
  
  try {
    // Decodificar el token ingresado
    const decoded = decodeJWT(token);
    const now = Math.floor(Date.now() / 1000);
    
    console.log('‚úÖ Token decodificado exitosamente');
    
    // Mostrar an√°lisis completo del token
    jwtOutput.innerHTML = `
<strong>üîç JWT DECODIFICADO EXITOSAMENTE</strong>

<strong>üìã HEADER (Metadatos del Token):</strong>
${JSON.stringify(decoded.header, null, 2)}

<strong>üì¶ PAYLOAD (Datos del Usuario):</strong>
${JSON.stringify(decoded.payload, null, 2)}

<strong>üîê SIGNATURE (Firma Digital):</strong>
${decoded.signature}
<em>Nota: La firma solo puede ser verificada por el servidor con la clave secreta</em>

<strong>‚è∞ AN√ÅLISIS TEMPORAL:</strong>
Emitido (iat): ${decoded.payload.iat ? new Date(decoded.payload.iat * 1000).toLocaleString() : 'No especificado'}
Expira (exp): ${decoded.payload.exp ? new Date(decoded.payload.exp * 1000).toLocaleString() : 'No especificado'}
Estado actual: ${decoded.payload.exp && decoded.payload.exp < now ? '‚ùå EXPIRADO' : '‚úÖ V√ÅLIDO (pero verificar firma en servidor)'}

<strong>üõ°Ô∏è CONSIDERACIONES DE SEGURIDAD:</strong>
- Esta decodificaci√≥n es solo para an√°lisis
- La verificaci√≥n de firma debe hacerse en el servidor
- Los datos pueden estar expuestos si el token es interceptado
- Usar HTTPS en producci√≥n es obligatorio
    `;
    jwtOutput.className = 'info-box success';
  } catch (error) {
    console.error('‚ùå Error decodificando token manual:', error);
    jwtOutput.innerHTML = `
<strong>‚ùå ERROR DE DECODIFICACI√ìN</strong>

${error}

<strong>üîß POSIBLES CAUSAS:</strong>
- Token malformado (debe tener formato: header.payload.signature)
- Caracteres inv√°lidos o codificaci√≥n incorrecta
- Token truncado o incompleto
- No es un JWT v√°lido

<strong>üí° CONSEJOS:</strong>
- Verifica que copiaste el token completo
- Aseg√∫rate de no incluir espacios extra
- Tokens JWT v√°lidos tienen exactamente 2 puntos (.)
    `;
    jwtOutput.className = 'info-box error';
  }
});

// ===================================================================================================
// üöÄ INICIALIZACI√ìN DE LA APLICACI√ìN
// ===================================================================================================

// Funci√≥n de inicializaci√≥n que se ejecuta cuando la p√°gina carga
console.log('üöÄ Iniciando aplicaci√≥n JWT Frontend...');
console.log('üîß Configurando estado inicial...');

// Verificar estado de autenticaci√≥n inicial
// Esto permite que usuarios con tokens v√°lidos permanezcan logueados
// aunque recarguen la p√°gina
checkAuthStatus();

// Inicializar display de tokens
updateTokenDisplay();

// ===================================================================================================
// ‚è∞ AUTO-ACTUALIZACI√ìN PERI√ìDICA
// ===================================================================================================

// Configurar actualizaci√≥n autom√°tica del display cada 5 segundos
// Esto mantiene la informaci√≥n de expiraci√≥n actualizada en tiempo real
console.log('‚è∞ Configurando auto-actualizaci√≥n cada 5 segundos...');
setInterval(() => {
  updateTokenDisplay();
  console.log('üîÑ Auto-actualizaci√≥n ejecutada');
}, 5000);

console.log('‚úÖ Aplicaci√≥n JWT Frontend inicializada completamente');
console.log('üéØ Lista para manejar autenticaci√≥n JWT con tokens de doble capa');